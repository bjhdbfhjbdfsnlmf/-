# -*- coding: utf-8 -*-
from typing import List
from logger_config import logger
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_USERNAME = os.getenv('DB_USERNAME', 'postgres')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'umschoolpswd')
DB_NAME = os.getenv('DB_NAME', 'umschooldb')
DB_PORT = os.getenv('DB_PORT', '5432')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ .env —Ñ–∞–π–ª–µ)
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

# URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = f'postgresql://{DB_USERNAME}:{DB_PASSWORD}@localhost:{DB_PORT}/{DB_NAME}'

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
EMOJI = {
    'create': 'üìù',    # –°–æ–∑–¥–∞—Ç—å
    'edit': '‚úèÔ∏è',      # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    'delete': 'üóëÔ∏è',    # –£–¥–∞–ª–∏—Ç—å
    'stats': 'üìä',     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    'add': '‚ûï',       # –î–æ–±–∞–≤–∏—Ç—å
    'save': 'üíæ',      # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    'cancel': '‚ùå',    # –û—Ç–º–µ–Ω–∞
    'back': '‚óÄÔ∏è',      # –ù–∞–∑–∞–¥
    'next': '‚ñ∂Ô∏è',      # –î–∞–ª–µ–µ
    'question': '‚ùì',   # –í–æ–ø—Ä–æ—Å
    'answer': '‚úÖ',     # –û—Ç–≤–µ—Ç
    'warning': '‚ö†Ô∏è',   # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    'error': '‚ùå',     # –û—à–∏–±–∫–∞
    'success': '‚úÖ',    # –£—Å–ø–µ—Ö
    'options': 'üîÑ'    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
}

def get_bot_token() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return BOT_TOKEN

def get_admin_ids() -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    return ADMIN_IDS

def get_channel_id() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞"""
    channel_id = os.getenv('CHANNEL_ID')
    if not channel_id:
        raise ValueError("CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return channel_id

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        user_id = int(user_id)
        logger.info(f"=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===")
        logger.info(f"–í—Ö–æ–¥—è—â–∏–π user_id: {user_id} (—Ç–∏–ø: {type(user_id)})")
        logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMIN_IDS}")
        logger.info(f"–¢–∏–ø—ã ID –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤: {[type(admin_id) for admin_id in ADMIN_IDS]}")
        result = user_id in ADMIN_IDS
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
        logger.info(f"================================")
        return result
    except (ValueError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    